課題1.イベントを学習したときのサンプルで画面のどこをクリックしても「ここをクリック」という文字列「だけ」を赤くするように修正してください。 

js_test03.htmlとして以下のファイルを新規作成


<html>
<head>
  <meta charset="UTF-8">
</head>
<body>
  <h1>jQueryのイベント</h1>
  <p id="click_me">ここをクリック</p>
  <!-- jQueryの読み込み -->
  <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

  <!-- 自作JavaScriptの読み込み -->
  <script src="test03.js"></script>
</body>
</html>


次に test03.js として以下のファイルを新規作成


(function($, window) {
  $(function() {
    // ここに処理を書きます
    $('body').on('click', function() {
      $('#click_me').css({'color': 'red'});
    });
  });
})(jQuery, window);


結果、サンプルで画面のどこをクリックしても「ここをクリック」という文字列「だけ」を赤くなりました。





課題2.フォームの最後のサンプルでメールアドレスとパスワードのチェック処理を「関数」で作成し、#loginをクリックしたときに呼び出すように修正してください。



(function($, window) {
  $(function() {
    $('#login').on('click', function(e) {
      var email = $('#email').val(),
          password = $('#password').val();
      // alert(email);
      // alert(password);
      if (email == '') {
        alert('メールアドレスを入力してください');
      } else if (email.indexOf('@') < 0) {
        alert('メールアドレスには必ず「@」が必要です');
      }
      if (password == '') {
        alert('パスワードを入力してください');
      } else if (password.length < 6) {
        alert('パスワードは6文字以上です');
      }
    });
  });
})(jQuery, window);






課題3.jQueryによるAjaxはajax()以外にget()やpost()、getJSON()メソッドがあります。今回学習した課題をgetJSON()で書き換えてみましょう。



ブラウザで https://jsfiddle.net にアクセスして、まずは「HTML」の領域に以下を貼り付け


<html>
<head>
  <meta charset="UTF-8">
  <style>
    textarea {
      width: 80%;
      height: 100px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h1>jQueryとAjax</h1>
  <form>
    <input type="button" id="get_bank_list" value="銀行データ一覧を取得">
    <textarea id="result"></textarea>
  </form>
  <!-- jQueryの読み込み -->
  <script src="https://code.jquery.com/jquery-3.3.1.min.js">$.getJSON(url, (data)) => {
  for(let i=0; i<data.length; i++){
  console.log('get_bank_list=$data[i].id')
  }
  }
</script>
</body>
</html>


次に「JavaScript」の領域に以下を貼り付け



(function($, window) {
  $(function() {
    alert('first');
    $('#get_bank_list').on('click', function(e) {
      alert('click');
      var url = 'https://raw.githubusercontent.com/zengin-code/source-data/master/data/banks.json';

      $.ajax({
        url: url,
        type: 'get',
        data: {}
      }).done(function(data, status, xhr) {
        alert('done');
        var result = JSON.stringify(data);
        $('#result').val(result);
      }).fail(function(data, status, err) {
        alert('fail');
        var result = JSON.stringify(data);
        $('#result').val(result);
      }).always(function() {
        alert('always');
      });

      alert('under ajax');
    });
    alert('last');
  });
})(jQuery, window);



Runを押すと1. first　2. lastがalertされ、Ajax(非同期通信)を実行するために画面右下の「Result」に表示された「銀行データ一覧を取得する」ボタンを押すと、1. click　2. under ajax　3. done　4. alwaysとalertされ、受信(取得)した銀行一覧のデータを<textarea>に文字列で表示される。




課題4.デートピッカーのサンプルにボタンを追加して、そのボタンを押したときにカレンダー表示されるように修正してみましょう。



js_test08.htmlとして以下のファイルを新規作成、test03.js はそのまま使用


<html>
<head>
  <meta charset="UTF-8">
  <!-- デフォルトのテーマ  -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.4.3/flatpickr.css">
</head>
<body>
  <h1>jQueryのデートピッカープラグイン</h1>
  
  <input type="button" id="date_picker" value="text">

  <!-- jQueryの読み込み -->
  <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

  <!-- デートピッカー用プラグインの読み込み -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.4.3/flatpickr.min.js"></script>

  <!-- デートピッカーの日本語化用JSの読み込み -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/ja.js"></script>

  <!-- 自作JavaScriptの読み込み -->
  <script src="test08.js"></script>
</body>
</html>





課題5.「郵便番号から住所入力するjQueryプラグイン」を参考にして、郵便番号→住所変換で、入力する郵便番号を７桁にまとめるように修正してみましょう。



JSFiddleの「JavaScript」エリアに以下を記入して「Run」ボタンを押す


(function($, window) {
  $(function() {
    // ここに処理を書きます
    $('#zip1').jpostal({
        postcode : [
            '#zip1',
            '#zip2'
        ],
        if (postcode.length >= 7) {
        alert('7文字以内で入力してください');
        }
        
        address : {
            '#pref'  : '%3',
            '#city'  : '%4',
            '#street'  : '%5'
        }
    });
  });
})(jQuery, window);




課題6.さらに「検索」ボタンを追加して、そのボタンを押すまでは「検索しない」ように修正してみましょう。


ブラウザで https://jsfiddle.net にアクセスして、まずは「HTML」の領域に以下を貼り付け



<html>
<head>
  <meta charset="UTF-8">
</head>
<body>
  <h1>jQueryの郵便番号→住所変換プラグイン</h1>

  <dl>
    <dt>郵便番号</dt>
    <dd><input type="text" id="zip1">-<input type="text" id="zip2"></dd>
    <dt>都道府県</dt>
    <dd><input type="text" id="pref"></dd>
    <dt>市区町村</dt>
    <dd><input type="text" id="city"></dd>
    <dt>町名等</dt>
    <dd><input type="text" id="street"></dd>
  </dl>

  <!-- jQueryの読み込み -->
  <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
  
  <!-- 「検索」ボタンを追加 -->
  <input type="button" id="search_btn" value="検索">

  <!-- 郵便番号→住所変換用プラグインの読み込み -->
  <script src="https://jpostal-1006.appspot.com/jquery.jpostal.js"></script>

  <!-- 自作JavaScriptの読み込み -->
  <script src="test09.js"></script>
</body>
</html>


次に「JavaScript」の領域に以下を貼り付け

(function($, window) {
  $(function() {
    // ここに処理を書きます
    $('#zip1').jpostal({
        postcode : [
            '#zip1',
            '#zip2'
        ],
        if ('postcode'.length >= 7) {
        alert('7文字以内で入力してください');
        }
         $('postcode').each(function() {
    // searchボタンを表示する
    $(this).find("#search_btn").show();
        
        address : {
            '#pref'  : '%3',
            '#city'  : '%4',
            '#street'  : '%5'
        }
    });
  });
})(jQuery, window);



